// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        (unknown)
// source: test.proto

package testproto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Test struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Null           *NestedTest              `protobuf:"bytes,1,opt,name=null,proto3" json:"null,omitempty"`
	BoolTrue       bool                     `protobuf:"varint,2,opt,name=bool_true,json=boolTrue,proto3" json:"bool_true,omitempty"`
	BoolFalse      bool                     `protobuf:"varint,3,opt,name=bool_false,json=boolFalse,proto3" json:"bool_false,omitempty"`
	NumInt32       int32                    `protobuf:"varint,4,opt,name=num_int32,json=numInt32,proto3" json:"num_int32,omitempty"`
	NumInt64       int64                    `protobuf:"varint,5,opt,name=num_int64,json=numInt64,proto3" json:"num_int64,omitempty"`
	NumFloat       float32                  `protobuf:"fixed32,6,opt,name=num_float,json=numFloat,proto3" json:"num_float,omitempty"`
	NumDouble      float64                  `protobuf:"fixed64,7,opt,name=num_double,json=numDouble,proto3" json:"num_double,omitempty"`
	NumUint32      uint32                   `protobuf:"varint,8,opt,name=num_uint32,json=numUint32,proto3" json:"num_uint32,omitempty"`
	NumUint64      uint64                   `protobuf:"varint,9,opt,name=num_uint64,json=numUint64,proto3" json:"num_uint64,omitempty"`
	Str            string                   `protobuf:"bytes,10,opt,name=str,proto3" json:"str,omitempty"`
	StrDate        string                   `protobuf:"bytes,11,opt,name=str_date,json=strDate,proto3" json:"str_date,omitempty"`
	Timestamp      *timestamppb.Timestamp   `protobuf:"bytes,12,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Obj            *NestedTest              `protobuf:"bytes,13,opt,name=obj,proto3" json:"obj,omitempty"`
	ArrayEmpty     []int32                  `protobuf:"varint,14,rep,packed,name=array_empty,json=arrayEmpty,proto3" json:"array_empty,omitempty"`
	ArrayBool      []bool                   `protobuf:"varint,15,rep,packed,name=array_bool,json=arrayBool,proto3" json:"array_bool,omitempty"`
	ArrayNumInt32  []int32                  `protobuf:"varint,16,rep,packed,name=array_num_int32,json=arrayNumInt32,proto3" json:"array_num_int32,omitempty"`
	ArrayNumInt64  []int64                  `protobuf:"varint,17,rep,packed,name=array_num_int64,json=arrayNumInt64,proto3" json:"array_num_int64,omitempty"`
	ArrayNumFloat  []float32                `protobuf:"fixed32,18,rep,packed,name=array_num_float,json=arrayNumFloat,proto3" json:"array_num_float,omitempty"`
	ArrayNumDouble []float64                `protobuf:"fixed64,19,rep,packed,name=array_num_double,json=arrayNumDouble,proto3" json:"array_num_double,omitempty"`
	ArrayNumUint32 []uint32                 `protobuf:"varint,20,rep,packed,name=array_num_uint32,json=arrayNumUint32,proto3" json:"array_num_uint32,omitempty"`
	ArrayNumUint64 []uint64                 `protobuf:"varint,21,rep,packed,name=array_num_uint64,json=arrayNumUint64,proto3" json:"array_num_uint64,omitempty"`
	ArrayStr       []string                 `protobuf:"bytes,22,rep,name=array_str,json=arrayStr,proto3" json:"array_str,omitempty"`
	ArrayTimestamp []*timestamppb.Timestamp `protobuf:"bytes,23,rep,name=array_timestamp,json=arrayTimestamp,proto3" json:"array_timestamp,omitempty"`
}

func (x *Test) Reset() {
	*x = Test{}
	if protoimpl.UnsafeEnabled {
		mi := &file_test_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Test) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Test) ProtoMessage() {}

func (x *Test) ProtoReflect() protoreflect.Message {
	mi := &file_test_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Test.ProtoReflect.Descriptor instead.
func (*Test) Descriptor() ([]byte, []int) {
	return file_test_proto_rawDescGZIP(), []int{0}
}

func (x *Test) GetNull() *NestedTest {
	if x != nil {
		return x.Null
	}
	return nil
}

func (x *Test) GetBoolTrue() bool {
	if x != nil {
		return x.BoolTrue
	}
	return false
}

func (x *Test) GetBoolFalse() bool {
	if x != nil {
		return x.BoolFalse
	}
	return false
}

func (x *Test) GetNumInt32() int32 {
	if x != nil {
		return x.NumInt32
	}
	return 0
}

func (x *Test) GetNumInt64() int64 {
	if x != nil {
		return x.NumInt64
	}
	return 0
}

func (x *Test) GetNumFloat() float32 {
	if x != nil {
		return x.NumFloat
	}
	return 0
}

func (x *Test) GetNumDouble() float64 {
	if x != nil {
		return x.NumDouble
	}
	return 0
}

func (x *Test) GetNumUint32() uint32 {
	if x != nil {
		return x.NumUint32
	}
	return 0
}

func (x *Test) GetNumUint64() uint64 {
	if x != nil {
		return x.NumUint64
	}
	return 0
}

func (x *Test) GetStr() string {
	if x != nil {
		return x.Str
	}
	return ""
}

func (x *Test) GetStrDate() string {
	if x != nil {
		return x.StrDate
	}
	return ""
}

func (x *Test) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *Test) GetObj() *NestedTest {
	if x != nil {
		return x.Obj
	}
	return nil
}

func (x *Test) GetArrayEmpty() []int32 {
	if x != nil {
		return x.ArrayEmpty
	}
	return nil
}

func (x *Test) GetArrayBool() []bool {
	if x != nil {
		return x.ArrayBool
	}
	return nil
}

func (x *Test) GetArrayNumInt32() []int32 {
	if x != nil {
		return x.ArrayNumInt32
	}
	return nil
}

func (x *Test) GetArrayNumInt64() []int64 {
	if x != nil {
		return x.ArrayNumInt64
	}
	return nil
}

func (x *Test) GetArrayNumFloat() []float32 {
	if x != nil {
		return x.ArrayNumFloat
	}
	return nil
}

func (x *Test) GetArrayNumDouble() []float64 {
	if x != nil {
		return x.ArrayNumDouble
	}
	return nil
}

func (x *Test) GetArrayNumUint32() []uint32 {
	if x != nil {
		return x.ArrayNumUint32
	}
	return nil
}

func (x *Test) GetArrayNumUint64() []uint64 {
	if x != nil {
		return x.ArrayNumUint64
	}
	return nil
}

func (x *Test) GetArrayStr() []string {
	if x != nil {
		return x.ArrayStr
	}
	return nil
}

func (x *Test) GetArrayTimestamp() []*timestamppb.Timestamp {
	if x != nil {
		return x.ArrayTimestamp
	}
	return nil
}

type NestedTest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Str string `protobuf:"bytes,1,opt,name=str,proto3" json:"str,omitempty"`
}

func (x *NestedTest) Reset() {
	*x = NestedTest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_test_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NestedTest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NestedTest) ProtoMessage() {}

func (x *NestedTest) ProtoReflect() protoreflect.Message {
	mi := &file_test_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NestedTest.ProtoReflect.Descriptor instead.
func (*NestedTest) Descriptor() ([]byte, []int) {
	return file_test_proto_rawDescGZIP(), []int{1}
}

func (x *NestedTest) GetStr() string {
	if x != nil {
		return x.Str
	}
	return ""
}

var File_test_proto protoreflect.FileDescriptor

var file_test_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x2f, 0x76, 0x69,
	0x72, 0x75, 0x5f, 0x74, 0x65, 0x63, 0x68, 0x2e, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75,
	0x73, 0x65, 0x5f, 0x73, 0x69, 0x6e, 0x6b, 0x65, 0x72, 0x2e, 0x70, 0x61, 0x72, 0x73, 0x65, 0x72,
	0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x1a, 0x1f, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x95,
	0x07, 0x0a, 0x04, 0x54, 0x65, 0x73, 0x74, 0x12, 0x4f, 0x0a, 0x04, 0x6e, 0x75, 0x6c, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x76, 0x69, 0x72, 0x75, 0x5f, 0x74, 0x65, 0x63,
	0x68, 0x2e, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x73, 0x69, 0x6e,
	0x6b, 0x65, 0x72, 0x2e, 0x70, 0x61, 0x72, 0x73, 0x65, 0x72, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x54, 0x65,
	0x73, 0x74, 0x52, 0x04, 0x6e, 0x75, 0x6c, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x6f, 0x6f, 0x6c,
	0x5f, 0x74, 0x72, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x62, 0x6f, 0x6f,
	0x6c, 0x54, 0x72, 0x75, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x6f, 0x6f, 0x6c, 0x5f, 0x66, 0x61,
	0x6c, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x62, 0x6f, 0x6f, 0x6c, 0x46,
	0x61, 0x6c, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x75, 0x6d, 0x5f, 0x69, 0x6e, 0x74, 0x33,
	0x32, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6e, 0x75, 0x6d, 0x49, 0x6e, 0x74, 0x33,
	0x32, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x75, 0x6d, 0x5f, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6e, 0x75, 0x6d, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x1b,
	0x0a, 0x09, 0x6e, 0x75, 0x6d, 0x5f, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x08, 0x6e, 0x75, 0x6d, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6e,
	0x75, 0x6d, 0x5f, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x09, 0x6e, 0x75, 0x6d, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x75,
	0x6d, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x6e, 0x75, 0x6d, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x75, 0x6d,
	0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x6e,
	0x75, 0x6d, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x74, 0x72, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x74, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74,
	0x72, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x74,
	0x72, 0x44, 0x61, 0x74, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12,
	0x4d, 0x0a, 0x03, 0x6f, 0x62, 0x6a, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x76,
	0x69, 0x72, 0x75, 0x5f, 0x74, 0x65, 0x63, 0x68, 0x2e, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f,
	0x75, 0x73, 0x65, 0x5f, 0x73, 0x69, 0x6e, 0x6b, 0x65, 0x72, 0x2e, 0x70, 0x61, 0x72, 0x73, 0x65,
	0x72, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x4e,
	0x65, 0x73, 0x74, 0x65, 0x64, 0x54, 0x65, 0x73, 0x74, 0x52, 0x03, 0x6f, 0x62, 0x6a, 0x12, 0x1f,
	0x0a, 0x0b, 0x61, 0x72, 0x72, 0x61, 0x79, 0x5f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x18, 0x0e, 0x20,
	0x03, 0x28, 0x05, 0x52, 0x0a, 0x61, 0x72, 0x72, 0x61, 0x79, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12,
	0x1d, 0x0a, 0x0a, 0x61, 0x72, 0x72, 0x61, 0x79, 0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x18, 0x0f, 0x20,
	0x03, 0x28, 0x08, 0x52, 0x09, 0x61, 0x72, 0x72, 0x61, 0x79, 0x42, 0x6f, 0x6f, 0x6c, 0x12, 0x26,
	0x0a, 0x0f, 0x61, 0x72, 0x72, 0x61, 0x79, 0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x69, 0x6e, 0x74, 0x33,
	0x32, 0x18, 0x10, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0d, 0x61, 0x72, 0x72, 0x61, 0x79, 0x4e, 0x75,
	0x6d, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x26, 0x0a, 0x0f, 0x61, 0x72, 0x72, 0x61, 0x79, 0x5f,
	0x6e, 0x75, 0x6d, 0x5f, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x11, 0x20, 0x03, 0x28, 0x03, 0x52,
	0x0d, 0x61, 0x72, 0x72, 0x61, 0x79, 0x4e, 0x75, 0x6d, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x26,
	0x0a, 0x0f, 0x61, 0x72, 0x72, 0x61, 0x79, 0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x66, 0x6c, 0x6f, 0x61,
	0x74, 0x18, 0x12, 0x20, 0x03, 0x28, 0x02, 0x52, 0x0d, 0x61, 0x72, 0x72, 0x61, 0x79, 0x4e, 0x75,
	0x6d, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x61, 0x72, 0x72, 0x61, 0x79, 0x5f,
	0x6e, 0x75, 0x6d, 0x5f, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x18, 0x13, 0x20, 0x03, 0x28, 0x01,
	0x52, 0x0e, 0x61, 0x72, 0x72, 0x61, 0x79, 0x4e, 0x75, 0x6d, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65,
	0x12, 0x28, 0x0a, 0x10, 0x61, 0x72, 0x72, 0x61, 0x79, 0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x75, 0x69,
	0x6e, 0x74, 0x33, 0x32, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0e, 0x61, 0x72, 0x72, 0x61,
	0x79, 0x4e, 0x75, 0x6d, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x28, 0x0a, 0x10, 0x61, 0x72,
	0x72, 0x61, 0x79, 0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x15,
	0x20, 0x03, 0x28, 0x04, 0x52, 0x0e, 0x61, 0x72, 0x72, 0x61, 0x79, 0x4e, 0x75, 0x6d, 0x55, 0x69,
	0x6e, 0x74, 0x36, 0x34, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x72, 0x72, 0x61, 0x79, 0x5f, 0x73, 0x74,
	0x72, 0x18, 0x16, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x61, 0x72, 0x72, 0x61, 0x79, 0x53, 0x74,
	0x72, 0x12, 0x43, 0x0a, 0x0f, 0x61, 0x72, 0x72, 0x61, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x18, 0x17, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x61, 0x72, 0x72, 0x61, 0x79, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x1e, 0x0a, 0x0a, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64,
	0x54, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x74, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x73, 0x74, 0x72, 0x42, 0x2e, 0x5a, 0x2c, 0x76, 0x69, 0x72, 0x75, 0x2d, 0x74,
	0x65, 0x63, 0x68, 0x2f, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x73,
	0x69, 0x6e, 0x6b, 0x65, 0x72, 0x2f, 0x70, 0x61, 0x72, 0x73, 0x65, 0x72, 0x2f, 0x74, 0x65, 0x73,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_test_proto_rawDescOnce sync.Once
	file_test_proto_rawDescData = file_test_proto_rawDesc
)

func file_test_proto_rawDescGZIP() []byte {
	file_test_proto_rawDescOnce.Do(func() {
		file_test_proto_rawDescData = protoimpl.X.CompressGZIP(file_test_proto_rawDescData)
	})
	return file_test_proto_rawDescData
}

var file_test_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_test_proto_goTypes = []interface{}{
	(*Test)(nil),                  // 0: viru_tech.clickhouse_sinker.parser.testproto.v1.Test
	(*NestedTest)(nil),            // 1: viru_tech.clickhouse_sinker.parser.testproto.v1.NestedTest
	(*timestamppb.Timestamp)(nil), // 2: google.protobuf.Timestamp
}
var file_test_proto_depIdxs = []int32{
	1, // 0: viru_tech.clickhouse_sinker.parser.testproto.v1.Test.null:type_name -> viru_tech.clickhouse_sinker.parser.testproto.v1.NestedTest
	2, // 1: viru_tech.clickhouse_sinker.parser.testproto.v1.Test.timestamp:type_name -> google.protobuf.Timestamp
	1, // 2: viru_tech.clickhouse_sinker.parser.testproto.v1.Test.obj:type_name -> viru_tech.clickhouse_sinker.parser.testproto.v1.NestedTest
	2, // 3: viru_tech.clickhouse_sinker.parser.testproto.v1.Test.array_timestamp:type_name -> google.protobuf.Timestamp
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_test_proto_init() }
func file_test_proto_init() {
	if File_test_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_test_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Test); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_test_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NestedTest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_test_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_test_proto_goTypes,
		DependencyIndexes: file_test_proto_depIdxs,
		MessageInfos:      file_test_proto_msgTypes,
	}.Build()
	File_test_proto = out.File
	file_test_proto_rawDesc = nil
	file_test_proto_goTypes = nil
	file_test_proto_depIdxs = nil
}
